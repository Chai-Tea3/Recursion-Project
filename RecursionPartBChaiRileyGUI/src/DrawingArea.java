/*
 * Author: Riley Chai
 * Class: ICS4U
 * Program: Recursion Assignment Part B GUI
 */

import java.awt.*;
import java.awt.event.ActionEvent;//Event management
import java.awt.event.ActionListener;//Action listeners
import javax.swing.Timer;//Timer module
import java.awt.Graphics;//Graphics library
import java.util.ArrayList;

/**
 *
 * @author 335480661
 */
public class DrawingArea extends javax.swing.JPanel {

    /**
     * Creates new form DrawingArea
     */
    String bounceSound = "jumpSound.wav";
    SoundPlayer theSound = new SoundPlayer();//Creates the sound object.
    static Timer t1;//Timer for updating the screen.

    public static int i = 0;//Keeps track of the current index when looping through the coordinates arraylist.

    //Ball Variables
    Ball ballA;
    private ArrayList<Double> xyCoordinates = new ArrayList<>();//Stores the xy coordinates for the character.
    int screenSizeY = 400;//Vertical screen size.

    public DrawingArea() {
        initComponents();
        t1 = new Timer(50, new DrawingArea.TimerListener());//Creates the timer object.
        t1.start();//Starts the timer

        ballA = new Ball();//Creates the ball object
        ballA.halfDistance(Components.WallDistance, 0, xyCoordinates, Components.percentJumped);//Calculates the xy coordinates using the default values.
        xyCoordinates = ballA.getBallXY();//Fills the arraylist with the coordinates.
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        //Draws the background.
        Image bkg = Toolkit.getDefaultToolkit().getImage("BackgroundSky.JPG");
        g.drawImage(bkg, 0, 0, this);

        //Resets the timer to change the speed.
        t1.stop();
        t1 = new Timer(Components.Speed, new DrawingArea.TimerListener());
        t1.start();

        //Draws the wall.
        g.setColor(Color.cyan);
        g.drawLine(Components.WallDistance, 10, Components.WallDistance, screenSizeY);

        //Pauses the loop when either all the points have been displayed OR the character has reached the wall.
        if (i > xyCoordinates.size() - 1 || xyCoordinates.get(i) > Components.WallDistance - 50) {
        } else {
            if(i==0){//When the "Start" button is pressed:
            //Resets the ball object and arraylist to accommodate for any adjustments using the sliders.
            ballA.resetBallXY();//Resets the ArrayList in the ball class.
            xyCoordinates.clear();//Clears the current arraylist of coordinates
            ballA.halfDistance(Components.WallDistance, 0, xyCoordinates, Components.percentJumped);//Recalculates the xy coordinates for the ball.
            xyCoordinates = ballA.getBallXY();//Fills the arraylist with the new coordinates
            }
            
            //Part 7
            double xValue = xyCoordinates.get(i);
            double yValue = xyCoordinates.get(i + 1);

            //Draws the character
            Image character = Toolkit.getDefaultToolkit().getImage("mario.PNG");
            //Adjusts the y-values to prevent the character from going off-screen.            
            g.drawImage(character, (int) xValue, (int) ((yValue * (screenSizeY * 2 - 170)) / (xyCoordinates.get(19) + xyCoordinates.get(21)) * -1 + screenSizeY - 80), this);//Draw oval (x,y,width,height)

            if (i < xyCoordinates.size() - 3) {//Prevents IndexOutOfBoundsException when checking for the second x-value.
                if (xyCoordinates.get(i + 1) == 0 && xyCoordinates.get(i + 3) != 0) {//Plays when the x-value is zero AND if the next x-value is not zero. (Prevents double sounds)
                    theSound.play(bounceSound);//Plays the bounce sound.
                }
            }
        }
        i += 2;//Increments i by 2 to move to the next point since the array list is formatted (x1,y1,x2,y2...)
    }

    private class TimerListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent ae) {
            repaint();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
